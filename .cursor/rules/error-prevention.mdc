# Error Prevention Rules

## 반복적 오류 분석 및 해결 규칙

### 1. 정적 파일 로딩 오류 (400 Bad Request)

**증상:**
```
GET http://localhost:3005/_next/static/chunks/app/analysis/page-xxx.js net::ERR_ABORTED 400 (Bad Request)
GET http://localhost:3005/_next/static/css/xxx.css net::ERR_ABORTED 400 (Bad Request)
```

**원인:**
- 캐시된 빌드 파일과 새로운 코드 간 불일치
- 정적 파일 해시 변경으로 인한 400 오류
- Turbopack 캐시 손상
- 브라우저 캐시와 서버 캐시 간 동기화 문제

**해결책:**
```bash
# 1. 개발 서버 완전 종료
pkill -f "next dev"

# 2. 캐시 완전 삭제
rm -rf .next node_modules/.cache

# 3. 포트 프로세스 정리
lsof -ti:3005 | xargs kill -9

# 4. 서버 재시작
npm run dev
```

**예방 규칙:**
- 코드 변경 후 즉시 브라우저 하드 리프레시 (Cmd+Shift+R)
- 정기적인 캐시 클리닝 (주 1회)
- 개발 중 브라우저 개발자 도구 열어두기

### 2. 무한 루프 오류 (Maximum update depth exceeded)

**증상:**
```
Error: Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate.
```

**원인:**
- useEffect 의존성 배열에 함수 참조 포함
- 상태 업데이트가 useEffect를 다시 트리거
- 무한 리렌더링 루프

**해결책:**
```typescript
// Before (무한 루프 발생)
}, [isAnalyzing, isAudioOn, isVideoOn, onEmotionChange]);

// After (무한 루프 해결)
}, [isAnalyzing, isAudioOn, isVideoOn]);
```

**예방 규칙:**
- useEffect 의존성 배열에 함수 참조 포함 금지
- useCallback으로 함수 메모이제이션
- 상태 업데이트 로직을 useEffect 외부로 분리
- 의존성 배열 최소화

### 3. AudioContext 오류 (Cannot close a closed AudioContext)

**증상:**
```
Error: Cannot close a closed AudioContext.
```

**원인:**
- 이미 닫힌 AudioContext를 다시 닫으려고 시도
- 컴포넌트 언마운트 시 중복 정리 로직 실행

**해결책:**
```typescript
// Before (오류 발생)
if (audioContextRef.current) {
  audioContextRef.current.close();
}

// After (안전한 정리)
if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
  try {
    audioContextRef.current.close();
  } catch (error) {
    console.warn('AudioContext already closed:', error);
  }
}
```

**예방 규칙:**
- 리소스 상태 확인 후 정리
- try-catch로 예외 상황 처리
- 컴포넌트 언마운트 시 한 번만 정리 실행

### 4. TypeScript 타입 오류

**증상:**
```
Type error: Type '"consultation"' is not assignable to type '...'
```

**원인:**
- 새로운 타입 값 추가 시 기존 타입 정의 미업데이트
- 타입 정의와 실제 사용 간 불일치

**해결책:**
```typescript
// 타입 정의 업데이트
mediaType: 'image' | 'audio' | 'text' | 'realtime' | 'consultation';
```

**예방 규칙:**
- 새로운 타입 값 사용 전 타입 정의 먼저 업데이트
- 타입 안전성 우선 원칙
- 정기적인 타입 체크 실행

### 5. 빌드 오류 (Module parse failed)

**증상:**
```
Module parse failed: Identifier 'toggleAnalysis' has already been declared
```

**원인:**
- 함수 중복 선언
- 리팩토링 과정에서 기존 함수 미삭제

**해결책:**
- 중복 함수 완전 제거
- 함수명 충돌 확인
- 리팩토링 후 전체 빌드 테스트

**예방 규칙:**
- 리팩토링 시 기존 코드 완전 제거 확인
- 함수명 중복 검사
- 단계별 빌드 테스트

### 6. Next.js 빌드 오류 (Could not find a production build)

**증상:**
```
Error: Could not find a production build in the '.next' directory. Try building your app with 'next build' before starting the production server.
```

**원인:**
- 빌드 없이 프로덕션 서버 시작
- `.next` 디렉토리 누락 또는 손상
- 잘못된 스크립트 실행 순서

**해결책:**
```bash
# 1. 빌드 실행
npm run build

# 2. 빌드 성공 확인 후 서버 시작
npm run start
```

**예방 규칙:**
- 항상 `npm run build` 후 `npm run start` 실행
- 개발 중에는 `npm run dev` 사용
- 배포 전 빌드 테스트 필수

### 7. 환경 변수 오류

**증상:**
```
Error: Environment variable not found
```

**원인:**
- `.env.local` 파일 누락
- 환경 변수 이름 오타
- `NEXT_PUBLIC_` 접두사 누락

**해결책:**
```bash
# .env.local 파일 생성
NEXT_PUBLIC_API_URL=http://localhost:3000/api
NEXT_PUBLIC_APP_NAME=BeMore
```

**예방 규칙:**
- 프로젝트 시작 시 `.env.local` 파일 생성
- 환경 변수 이름 정확히 입력
- 클라이언트 사이드 변수는 `NEXT_PUBLIC_` 접두사 필수

## 종합 예방 전략

### 개발 워크플로우 규칙

1. **코드 변경 전:**
   - 현재 상태 백업 (git commit)
   - 타입 정의 먼저 업데이트
   - 의존성 배열 검토

2. **코드 변경 중:**
   - 작은 단위로 변경
   - 각 단계마다 빌드 테스트
   - 브라우저에서 즉시 확인

3. **코드 변경 후:**
   - 전체 빌드 실행
   - 브라우저 하드 리프레시
   - 기능 테스트

### 캐시 관리 규칙

1. **정기 캐시 클리닝:**
   ```bash
   # 주 1회 실행
   rm -rf .next node_modules/.cache
   npm install
   ```

2. **개발 중 캐시 문제 발생 시:**
   ```bash
   # 즉시 실행
   pkill -f "next dev"
   rm -rf .next
   npm run dev
   ```

3. **브라우저 캐시 관리:**
   - 개발 중 하드 리프레시 사용
   - 개발자 도구에서 캐시 비활성화
   - 정기적인 브라우저 캐시 삭제

### 코드 품질 규칙

1. **useEffect 사용 규칙:**
   - 의존성 배열 최소화
   - 함수 참조 포함 금지
   - 상태 업데이트 로직 분리

2. **리소스 관리 규칙:**
   - 상태 확인 후 정리
   - try-catch로 예외 처리
   - 컴포넌트 언마운트 시 정리

3. **타입 안전성 규칙:**
   - 새로운 타입 값 사용 전 정의 업데이트
   - 정기적인 타입 체크
   - 타입 우선 개발

### 모니터링 및 디버깅

1. **오류 로그 모니터링:**
   - 브라우저 콘솔 오류 주기적 확인
   - 서버 로그 모니터링
   - 빌드 오류 즉시 해결

2. **성능 모니터링:**
   - 무한 루프 감지
   - 메모리 누수 확인
   - 리렌더링 최적화

3. **사용자 경험 모니터링:**
   - UI 깨짐 현상 확인
   - 기능 동작 검증
   - 반응성 테스트

## 응급 상황 대응 체크리스트

### 오류 발생 시 즉시 실행할 단계:

1. **브라우저 하드 리프레시** (Cmd+Shift+R)
2. **개발자 도구 콘솔 확인**
3. **서버 로그 확인**
4. **캐시 클리닝 실행**
5. **빌드 재실행**
6. **기능 테스트**

### 문제 지속 시 추가 조치:

1. **git 상태 확인** (변경사항 백업)
2. **node_modules 재설치**
3. **포트 충돌 확인**
4. **브라우저 캐시 완전 삭제**
5. **다른 브라우저에서 테스트**

### 빌드 관련 추가 조치:

1. **빌드 전 체크:**
   - `npm install` 완료 확인
   - `.env.local` 파일 존재 확인
   - TypeScript 오류 없음 확인

2. **빌드 실패 시:**
   - `npm run build --verbose` 상세 로그 확인
   - `npx tsc --noEmit` 타입 체크
   - `npm run lint` 린트 체크

3. **프로덕션 배포 전:**
   - `npm run build` 성공 확인
   - `npm run start` 서버 정상 시작 확인
   - 모든 페이지 정상 로드 확인

이러한 규칙들을 준수하면 반복적 오류 발생을 크게 줄일 수 있습니다.
description:
globs:
alwaysApply: false
---
