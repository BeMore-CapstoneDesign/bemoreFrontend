# JSX Structure Validation & Error Prevention

## üö® CRITICAL JSX PARSING RULES

### **JSX Structure Validation**
This rule prevents the "Unexpected token `div`. Expected jsx identifier" error that occurs when JSX structure is malformed.

## üéØ JSX STRUCTURE PATTERNS

### **Correct JSX Structure**
```typescript
// ‚úÖ CORRECT - Proper JSX nesting
return (
  <div className="container">
    <Navigation />
    <main className="content">
      <div className="wrapper">
        {/* Header section */}
        <div className="header">
          <h1>Title</h1>
        </div>
        
        {/* Content section */}
        <div className="content">
          <p>Content</p>
        </div>
      </div>
    </main>
  </div>
);
```

### **Incorrect JSX Structure (AVOID)**
```typescript
// ‚ùå WRONG - Malformed JSX structure
return (
  <div className="container">
    <Navigation />
    <main className="content">
      <div className="wrapper">
    {/* Header section */}
    <div className="header">  // ‚Üê This causes parsing error!
      <h1>Title</h1>
    </div>
```

## üö® CRITICAL RULES - MUST FOLLOW

### ‚úÖ ALWAYS DO
1. **Check JSX indentation** - Ensure all JSX elements are properly nested
2. **Validate parent-child relationships** - Every JSX element must have a clear parent
3. **Use consistent indentation** - 2 spaces for each nesting level
4. **Place comments inside JSX expressions** - `{/* comment */}` format only
5. **Verify closing tags** - Every opening tag must have a corresponding closing tag
6. **Test JSX structure** - Run TypeScript compiler to catch parsing errors
7. **Use IDE formatting** - Enable Prettier/ESLint for automatic formatting

### ‚ùå NEVER DO
1. **Don't mix indentation levels** - Keep all elements at the same nesting level consistent
2. **Don't place JSX elements outside parent containers** - All elements must be properly nested
3. **Don't use HTML comments** - Use JSX comment syntax `{/* */}` only
4. **Don't ignore TypeScript errors** - Fix all JSX parsing errors immediately
5. **Don't edit JSX without structure validation** - Always verify the complete structure
6. **Don't use inconsistent spacing** - Maintain uniform indentation throughout

## üîç COMMON ERROR PATTERNS

### **Pattern 1: Malformed Indentation**
```typescript
// ‚ùå ERROR PATTERN
<div className="parent">
  <div className="child">
{/* Comment */}
<div className="sibling">  // ‚Üê Wrong indentation level
  Content
</div>
```

**Fix:**
```typescript
// ‚úÖ CORRECT PATTERN
<div className="parent">
  <div className="child">
    {/* Comment */}
    <div className="sibling">  // ‚Üê Proper indentation
      Content
    </div>
  </div>
</div>
```

### **Pattern 2: Missing Parent Container**
```typescript
// ‚ùå ERROR PATTERN
return (
  <div className="container">
    <div className="wrapper">
  {/* Missing parent div */}
  <div className="content">  // ‚Üê No parent container
    Content
  </div>
```

**Fix:**
```typescript
// ‚úÖ CORRECT PATTERN
return (
  <div className="container">
    <div className="wrapper">
      {/* Proper parent-child structure */}
      <div className="content">  // ‚Üê Properly nested
        Content
      </div>
    </div>
  </div>
);
```

### **Pattern 3: Incorrect Comment Placement**
```typescript
// ‚ùå ERROR PATTERN
<div className="container">
  <div className="wrapper">
<!-- HTML comment -->  // ‚Üê Wrong comment syntax
<div className="content">
  Content
</div>
```

**Fix:**
```typescript
// ‚úÖ CORRECT PATTERN
<div className="container">
  <div className="wrapper">
    {/* JSX comment */}
    <div className="content">
      Content
    </div>
  </div>
</div>
```

## üõ†Ô∏è VALIDATION CHECKLIST

### **Before Committing JSX Changes**
- [ ] **Indentation Check**: All elements properly indented?
- [ ] **Parent-Child Validation**: Every element has a clear parent?
- [ ] **Comment Syntax**: Using `{/* */}` format only?
- [ ] **Closing Tags**: All opening tags have closing tags?
- [ ] **TypeScript Compilation**: No parsing errors?
- [ ] **IDE Formatting**: Code formatted with Prettier/ESLint?

### **Common Validation Commands**
```bash
# TypeScript compilation check
npx tsc --noEmit

# ESLint JSX validation
npx eslint src/**/*.tsx

# Prettier formatting
npx prettier --check src/**/*.tsx
```

## üéØ COMPONENT STRUCTURE TEMPLATE

### **Standard Component Template**
```typescript
export function ComponentName() {
  // State and logic here
  
  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="space-y-8">
          {/* Header Section */}
          <div className="text-center space-y-4">
            <h1>Title</h1>
            <p>Description</p>
          </div>
          
          {/* Content Section */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Left Column */}
            <div className="lg:col-span-1">
              <Card>
                <CardContent>
                  Content
                </CardContent>
              </Card>
            </div>
            
            {/* Right Column */}
            <div className="lg:col-span-2">
              <Card>
                <CardContent>
                  Content
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
```

## üîß DEBUGGING TECHNIQUES

### **Error Diagnosis Steps**
1. **Check the error line** - Look at the exact line mentioned in the error
2. **Verify indentation** - Ensure proper nesting levels
3. **Check parent containers** - Make sure all elements have parents
4. **Validate comment syntax** - Use only JSX comment format
5. **Test with minimal JSX** - Start with a simple structure and build up

### **Common Error Messages and Solutions**
```typescript
// Error: "Unexpected token `div`. Expected jsx identifier"
// Solution: Check indentation and parent-child relationships

// Error: "JSX expressions must have one parent element"
// Solution: Wrap multiple elements in a single parent

// Error: "Parsing ecmascript source code failed"
// Solution: Verify JSX syntax and structure
```

## üìã PREVENTION STRATEGIES

### **Development Workflow**
1. **Write JSX incrementally** - Build structure step by step
2. **Use TypeScript strict mode** - Enable strict JSX checking
3. **Enable real-time error checking** - Use IDE with TypeScript support
4. **Regular formatting** - Run Prettier before committing
5. **Code review focus** - Pay special attention to JSX structure

### **IDE Configuration**
```json
// .prettierrc
{
  "tabWidth": 2,
  "useTabs": false,
  "semi": true,
  "singleQuote": true,
  "trailingComma": "es5"
}

// .eslintrc
{
  "rules": {
    "react/jsx-indent": ["error", 2],
    "react/jsx-indent-props": ["error", 2],
    "react/jsx-closing-bracket-location": ["error", "line-aligned"]
  }
}
```

## üéØ REMEMBER
- **JSX is XML-like** - Follow strict nesting rules
- **Indentation matters** - It's not just visual, it affects parsing
- **Comments are expressions** - Use `{/* */}` syntax only
- **Validate early** - Check structure before adding complex logic
- **Use tools** - Leverage TypeScript, ESLint, and Prettier for validation
description:
globs:
alwaysApply: false
---
