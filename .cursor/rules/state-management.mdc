# Zustand State Management Patterns

## 🏪 Store Architecture

### Main Store Structure
Reference [src/modules/store.ts](mdc:src/modules/store.ts) for the complete store implementation:

```typescript
interface AppState {
  // User state
  user: UserProfile | null;
  isAuthenticated: boolean;
  
  // Session state
  currentSession: {
    id: string | null;
    startTime: Date | null;
    endTime?: Date | null;
    emotionHistory: EmotionAnalysis[];
    chatHistory: ChatMessage[];
  };
  
  // UI state
  theme: 'light' | 'dark' | 'auto';
  currentEmotion: EmotionState;
  isLoading: boolean;
  
  // Actions
  setUser: (user: UserProfile) => void;
  setAuthenticated: (status: boolean) => void;
  startSession: () => void;
  endSession: () => void;
  addEmotionAnalysis: (analysis: EmotionAnalysis) => void;
  addChatMessage: (message: ChatMessage) => void;
  setTheme: (theme: 'light' | 'dark' | 'auto') => void;
  setCurrentEmotion: (emotion: EmotionState) => void;
  setLoading: (loading: boolean) => void;
  clearSession: () => void;
}
```

## 🚨 CRITICAL STATE MANAGEMENT RULES

### ✅ MUST DO
1. **Use Zustand for ALL global state** - No React Context or Redux
2. **Define proper TypeScript interfaces** for all state and actions
3. **Use immutable updates** - Always spread existing state
4. **Separate state from actions** in interface definitions
5. **Use descriptive action names** - `setUser`, `addEmotionAnalysis`
6. **Handle loading states** - Always include `isLoading` boolean
7. **Persist critical data** - Use Zustand persist middleware

### ❌ NEVER DO
1. **Don't mutate state directly** - Always use setter functions
2. **Don't use React useState for global state** - Use Zustand store
3. **Don't create multiple stores** - Use single store with slices
4. **Don't bypass the store** - All state changes go through actions
5. **Don't store derived state** - Compute it in components
6. **Don't store UI-only state** - Use local component state

## 🎯 Store Usage Patterns

### Component Integration
```typescript
import { useAppStore } from '../modules/store';

export function MyComponent() {
  const { user, setUser, isLoading } = useAppStore();
  
  const handleLogin = (userData: UserProfile) => {
    setUser(userData);
  };
  
  return (
    <div>
      {isLoading ? <LoadingSpinner /> : <UserProfile user={user} />}
    </div>
  );
}
```

### State Updates Pattern
```typescript
// ✅ CORRECT - Immutable update
addEmotionAnalysis: (analysis) => {
  const { currentSession } = get();
  set({
    currentSession: {
      ...currentSession,
      emotionHistory: [...currentSession.emotionHistory, analysis],
    },
    currentEmotion: analysis.emotion as EmotionState,
  });
}

// ❌ WRONG - Direct mutation
addEmotionAnalysis: (analysis) => {
  const { currentSession } = get();
  currentSession.emotionHistory.push(analysis); // Don't do this!
}
```

## 🔧 Store Configuration

### Store Setup with Middleware
```typescript
export const useAppStore = create<AppState>()(
  devtools(
    persist(
      (set, get) => ({
        // Initial state
        user: null,
        isAuthenticated: false,
        currentSession: {
          id: null,
          startTime: null,
          emotionHistory: [],
          chatHistory: [],
        },
        theme: 'auto',
        currentEmotion: 'neutral',
        isLoading: false,

        // Actions
        setUser: (user) => set({ user }),
        setAuthenticated: (status) => set({ isAuthenticated: status }),
        // ... more actions
      }),
      {
        name: 'bemore-store',
        partialize: (state) => ({
          user: state.user,
          theme: state.theme,
          isAuthenticated: state.isAuthenticated,
        }),
      }
    )
  )
);
```

## 📊 State Organization

### Session Management
```typescript
// Session lifecycle
startSession: () => {
  const sessionId = `session_${Date.now()}`;
  set({
    currentSession: {
      id: sessionId,
      startTime: new Date(),
      emotionHistory: [],
      chatHistory: [],
    },
  });
},

endSession: () => {
  const { currentSession } = get();
  set({
    currentSession: {
      ...currentSession,
      endTime: new Date(),
    },
  });
},
```

### Data Accumulation
```typescript
// Add to arrays immutably
addEmotionAnalysis: (analysis) => {
  const { currentSession } = get();
  set({
    currentSession: {
      ...currentSession,
      emotionHistory: [...currentSession.emotionHistory, analysis],
    },
  });
},

addChatMessage: (message) => {
  const { currentSession } = get();
  set({
    currentSession: {
      ...currentSession,
      chatHistory: [...currentSession.chatHistory, message],
    },
  });
},
```

## 🎨 UI State Management

### Loading States
```typescript
// Global loading state
setLoading: (loading) => set({ isLoading: loading }),

// Usage in components
const { isLoading, setLoading } = useAppStore();

const handleAsyncOperation = async () => {
  setLoading(true);
  try {
    await someAsyncOperation();
  } finally {
    setLoading(false);
  }
};
```

### Theme Management
```typescript
// Theme switching
setTheme: (theme) => set({ theme }),

// Usage with CSS variables
const { theme } = useAppStore();

useEffect(() => {
  document.documentElement.setAttribute('data-theme', theme);
}, [theme]);
```

## 🔄 State Synchronization

### Real-time Updates
```typescript
// Emotion state updates
setCurrentEmotion: (emotion) => set({ currentEmotion: emotion }),

// Sync with analysis results
addEmotionAnalysis: (analysis) => {
  const { currentSession } = get();
  set({
    currentSession: {
      ...currentSession,
      emotionHistory: [...currentSession.emotionHistory, analysis],
    },
    currentEmotion: analysis.emotion as EmotionState, // Sync current emotion
  });
},
```

### Cross-component Communication
```typescript
// Shared state between components
const { currentEmotion, addEmotionAnalysis } = useAppStore();

// Component A updates emotion
const updateEmotion = (newEmotion: EmotionAnalysis) => {
  addEmotionAnalysis(newEmotion);
};

// Component B automatically receives updates
const { currentEmotion } = useAppStore();
```

## 🧹 State Cleanup

### Session Cleanup
```typescript
clearSession: () => {
  set({
    currentSession: {
      id: null,
      startTime: null,
      emotionHistory: [],
      chatHistory: [],
    },
    currentEmotion: 'neutral',
  });
},
```

### User Logout
```typescript
logout: () => {
  set({
    user: null,
    isAuthenticated: false,
    currentSession: {
      id: null,
      startTime: null,
      emotionHistory: [],
      chatHistory: [],
    },
  });
},
```

## 📱 Performance Optimization

### Selective State Subscription
```typescript
// Only subscribe to needed state
const user = useAppStore((state) => state.user);
const isLoading = useAppStore((state) => state.isLoading);

// Instead of subscribing to entire store
const { user, isLoading } = useAppStore(); // Less efficient
```

### Computed State
```typescript
// Compute derived state in components
const emotionHistory = useAppStore((state) => state.currentSession.emotionHistory);
const recentEmotions = emotionHistory.slice(-5); // Last 5 emotions

// Don't store computed state in store
```
description:
globs:
alwaysApply: false
---
